{"version":3,"file":"static/js/367.8c95fe67.chunk.js","mappings":"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","sources":["pages/Arc/Arc.jsx","components/SelectedComponent/SelectedComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport SelectedComponent from '../../components/SelectedComponent/SelectedComponent';\r\nimport './Arc.css';\r\n\r\nconst Arc = () => {\r\n    const { saga, selectedarc } = useParams();\r\n    const [scans, setScans] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchScans = async () => {\r\n            try {\r\n                const response = await fetch(\r\n                    `https://kpiece2.s3.eu-west-3.amazonaws.com/data/saga/${saga}/${selectedarc}.json`\r\n                );\r\n                if (!response.ok) {\r\n                    throw new Error('Erreur lors du fetch des scans');\r\n                }\r\n                const data = await response.json();\r\n                setScans(data.map(scan => ({\r\n                    scan: scan.scan,\r\n                    name: scan.name,\r\n                    arc: scan.arc,\r\n                    tome: scan.tome,\r\n                    maxpages: scan.maxpages,\r\n                    date: scan.date,\r\n                    saga: scan.saga,\r\n                })));\r\n            } catch (error) {\r\n                console.error('Erreur lors du fetch:', error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchScans();\r\n    }, [saga, selectedarc]);\r\n\r\n    useEffect(() => {\r\n        fetch('https://kpiece2.s3.eu-west-3.amazonaws.com/data/saga.json')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                const match = json.find(item => item.saganame === saga);\r\n                if (match && match.arcssearch && match.arcsname) {\r\n                    const idx = match.arcssearch.indexOf(selectedarc);\r\n                    if (idx >= 0) {\r\n                        setScans(prev =>\r\n                            prev.map(scan => ({\r\n                                ...scan,\r\n                                arcName: match.arcsname[idx],\r\n                            }))\r\n                        );\r\n                    }\r\n                }\r\n            })\r\n            .catch(console.error);\r\n    }, [saga, selectedarc]);\r\n\r\n    const componentName = scans[0]?.arcName || selectedarc;\r\n    const componentImgLink = `https://kpiece2.s3.eu-west-3.amazonaws.com/img/arcs/${selectedarc}.webp`;\r\n    const scanCounter = scans.length;\r\n\r\n    return (\r\n        <SelectedComponent\r\n            componentName={componentName}\r\n            componentImgLink={componentImgLink}\r\n            scanCounter={scanCounter}\r\n            scans={scans}\r\n            loading={loading}\r\n            componentLink=\"\"\r\n        />\r\n    );\r\n};\r\n\r\nexport default Arc;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './SelectedComponent.css';\r\n\r\nconst SelectedComponent = ({\r\n    componentName,\r\n    componentLink,\r\n    componentImgLink,\r\n    scanCounter,\r\n    scans // on reçoit l'ensemble des scans en prop\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [ascending, setAscending] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    // Tri des scans selon le numéro (par défaut tri croissant)\r\n    const sortedScans = [...scans].sort((a, b) =>\r\n        ascending ? parseInt(a.scan) - parseInt(b.scan) : parseInt(b.scan) - parseInt(a.scan)\r\n    );\r\n\r\n    // Pagination : 10 scans par page\r\n    const itemsPerPage = 10;\r\n    const totalPages = Math.ceil(sortedScans.length / itemsPerPage);\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    const currentScans = sortedScans.slice(startIndex, startIndex + itemsPerPage);\r\n\r\n    const handleSortClick = () => setAscending(!ascending);\r\n    const handleClick = () => navigate(-1);\r\n\r\n    const ReadScan = (scan) => {\r\n        navigate(`/scan/${scan.saga}/${scan.arc}/${scan.scan}/01`);\r\n    };\r\n\r\n    return (\r\n        <div className=\"Selected-Component\">\r\n            <div className=\"Selected-Component-Header\">\r\n                <div className=\"back-button\" onClick={handleClick}>\r\n                    <i className=\"fa-solid fa-arrow-left\"></i>\r\n                </div>\r\n                <div \r\n                    className=\"Selected-Component-card\"\r\n                    onClick={() => navigate(componentLink || '#')}\r\n                    style={{ cursor: componentLink ? 'pointer' : 'default' }}\r\n                >\r\n                    <img\r\n                        src={componentImgLink}\r\n                        alt={componentName}\r\n                        className=\"Selected-Component-image\"\r\n                    />\r\n                    <h2 className=\"Selected-Component-h2\">{componentName}</h2>\r\n                </div>\r\n                <div className=\"Selected-Component-Counter\">{scanCounter} Chapitres </div>\r\n            </div>\r\n\r\n            <div className=\"sort-button\">\r\n                <button onClick={handleSortClick}>\r\n                    <i className={`fa-solid fa-angles-up ${!ascending ? 'rotated' : ''}`}></i>\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"Selected-Component-List-Scan\">\r\n                {currentScans.map((scan, index) => (\r\n                    <div className=\"Selected-Component-Scan\" key={index}>\r\n                        <h3> Chapitre {scan.scan}</h3>\r\n                        <p\r\n                            className=\"Selected-Component-Scan-Name\"\r\n                        >\r\n                            {scan.name}\r\n                        </p>\r\n                        <p style={{\r\n                            backgroundImage: `linear-gradient(45deg, ${scan.color1}, ${scan.color2})`,\r\n                            WebkitBackgroundClip: 'text',\r\n                            WebkitTextFillColor: 'transparent'\r\n                        }} className='Selected-Component-Scan-Arc'>{scan.arcName}</p>\r\n                        <p className='Selected-Component-Scan-Date'>- {scan.date}</p>\r\n                        <button\r\n                            onClick={() => ReadScan(scan)}\r\n                            className=\"read-scan-button\"\r\n                        >\r\n                            Lire\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {totalPages > 1 && (\r\n                <div className=\"pagination-container\">\r\n                    {[...Array(totalPages)].map((_, index) => (\r\n                        <button\r\n                            key={index}\r\n                            className={currentPage === index + 1 ? \"active-page\" : \"\"}\r\n                            onClick={() => setCurrentPage(index + 1)}\r\n                        >\r\n                            {index + 1}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectedComponent;\r\n"],"names":["Arc","_scans$","saga","selectedarc","useParams","scans","setScans","useState","loading","setLoading","useEffect","async","response","fetch","ok","Error","data","json","map","scan","name","arc","tome","maxpages","date","error","console","fetchScans","then","res","match","find","item","saganame","arcssearch","arcsname","idx","indexOf","prev","arcName","catch","componentName","componentImgLink","scanCounter","length","_jsx","SelectedComponent","componentLink","_ref","navigate","useNavigate","ascending","setAscending","currentPage","setCurrentPage","sortedScans","sort","a","b","parseInt","totalPages","Math","ceil","startIndex","currentScans","slice","_jsxs","className","children","onClick","handleClick","style","cursor","src","alt","handleSortClick","index","backgroundImage","color1","color2","WebkitBackgroundClip","WebkitTextFillColor","ReadScan","Array","_"],"sourceRoot":""}