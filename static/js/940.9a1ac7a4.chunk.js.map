{"version":3,"file":"static/js/940.9a1ac7a4.chunk.js","mappings":"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","sources":["components/SelectedComponent/SelectedComponent.jsx","pages/Tome/Tome.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './SelectedComponent.css';\r\n\r\nconst SelectedComponent = ({\r\n    componentName,\r\n    componentLink,\r\n    componentImgLink,\r\n    scanCounter,\r\n    scans // on reçoit l'ensemble des scans en prop\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [ascending, setAscending] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    // Tri des scans selon le numéro (par défaut tri croissant)\r\n    const sortedScans = [...scans].sort((a, b) =>\r\n        ascending ? parseInt(a.scan) - parseInt(b.scan) : parseInt(b.scan) - parseInt(a.scan)\r\n    );\r\n\r\n    // Pagination : 10 scans par page\r\n    const itemsPerPage = 10;\r\n    const totalPages = Math.ceil(sortedScans.length / itemsPerPage);\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    const currentScans = sortedScans.slice(startIndex, startIndex + itemsPerPage);\r\n\r\n    const handleSortClick = () => setAscending(!ascending);\r\n    const handleClick = () => navigate(-1);\r\n\r\n    const ReadScan = (scan) => {\r\n        navigate(`/scan/${scan.saga}/${scan.arc}/${scan.scan}/01`);\r\n    };\r\n\r\n    return (\r\n        <div className=\"Selected-Component\">\r\n            <div className=\"Selected-Component-Header\">\r\n                <div className=\"back-button\" onClick={handleClick}>\r\n                    <i className=\"fa-solid fa-arrow-left\"></i>\r\n                </div>\r\n                <div \r\n                    className=\"Selected-Component-card\"\r\n                    onClick={() => navigate(componentLink || '#')}\r\n                    style={{ cursor: componentLink ? 'pointer' : 'default' }}\r\n                >\r\n                    <img\r\n                        src={componentImgLink}\r\n                        alt={componentName}\r\n                        className=\"Selected-Component-image\"\r\n                    />\r\n                    <h2 className=\"Selected-Component-h2\">{componentName}</h2>\r\n                </div>\r\n                <div className=\"Selected-Component-Counter\">{scanCounter} Chapitres </div>\r\n            </div>\r\n\r\n            <div className=\"sort-button\">\r\n                <button onClick={handleSortClick}>\r\n                    <i className={`fa-solid fa-angles-up ${!ascending ? 'rotated' : ''}`}></i>\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"Selected-Component-List-Scan\">\r\n                {currentScans.map((scan, index) => (\r\n                    <div className=\"Selected-Component-Scan\" key={index}>\r\n                        <h3> Chapitre {scan.scan}</h3>\r\n                        <p\r\n                            className=\"Selected-Component-Scan-Name\"\r\n                        >\r\n                            {scan.name}\r\n                        </p>\r\n                        <p style={{\r\n                            backgroundImage: `linear-gradient(45deg, ${scan.color1}, ${scan.color2})`,\r\n                            WebkitBackgroundClip: 'text',\r\n                            WebkitTextFillColor: 'transparent'\r\n                        }} className='Selected-Component-Scan-Arc'>{scan.arcName}</p>\r\n                        <p className='Selected-Component-Scan-Date'>- {scan.date}</p>\r\n                        <button\r\n                            onClick={() => ReadScan(scan)}\r\n                            className=\"read-scan-button\"\r\n                        >\r\n                            Lire\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {totalPages > 1 && (\r\n                <div className=\"pagination-container\">\r\n                    {[...Array(totalPages)].map((_, index) => (\r\n                        <button\r\n                            key={index}\r\n                            className={currentPage === index + 1 ? \"active-page\" : \"\"}\r\n                            onClick={() => setCurrentPage(index + 1)}\r\n                        >\r\n                            {index + 1}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectedComponent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport SelectedComponent from '../../components/SelectedComponent/SelectedComponent';\r\nimport './Tome.css';\r\n\r\nconst Tome = () => {\r\n    const { tomelist, tomenumber } = useParams();\r\n    const [tomeData, setTomeData] = useState(null);\r\n    const [scans, setScans] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchTomeData = async () => {\r\n            try {\r\n                const url = `https://kpiece2.s3.eu-west-3.amazonaws.com/data/tomes/${tomelist}.json`;\r\n                const response = await fetch(url);\r\n                const data = await response.json();\r\n                const tome = data.find(t => t.tome === parseInt(tomenumber));\r\n                if (tome) {\r\n                    setTomeData(tome);\r\n                    fetchScans(tome);\r\n                } else {\r\n                    setLoading(false);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Erreur lors du chargement du tome:\", error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        const fetchScans = async (tome) => {\r\n            let fetchedScans = [];\r\n            const sagas = Array.isArray(tome.saga) ? tome.saga : [tome.saga];\r\n            const arcs = Array.isArray(tome.arc) ? tome.arc : [tome.arc];\r\n\r\n            for (let saga of sagas) {\r\n                for (let arc of arcs) {\r\n                    try {\r\n                        const url = `https://kpiece2.s3.eu-west-3.amazonaws.com/data/saga/${saga}/${arc}.json`;\r\n                        const response = await fetch(url);\r\n                        if (response.ok) {\r\n                            const arcScans = await response.json();\r\n                            const filteredScans = arcScans.filter(scan =>\r\n                                scan.scan >= tome.firstscan && scan.scan <= tome.lastscan\r\n                            );\r\n                            fetchedScans = [...fetchedScans, ...filteredScans];\r\n                        }\r\n                    } catch (error) {\r\n                        console.error(`Erreur lors du chargement des scans pour ${arc}:`, error);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Fetch arc color data and merge with each scan\r\n            try {\r\n                const colorsResponse = await fetch(\"https://kpiece2.s3.eu-west-3.amazonaws.com/data/arccolor.json\");\r\n                if (colorsResponse.ok) {\r\n                    const arcColors = await colorsResponse.json();\r\n                    const updatedScans = fetchedScans.map(scan => {\r\n                        const arcColor = arcColors.find(item => item.arc.toLowerCase() === scan.arc.toLowerCase());\r\n                        return arcColor\r\n                            ? {\r\n                                    ...scan,\r\n                                    color1: '#' + arcColor.color[0],\r\n                                    color2: '#' + arcColor.color[1],\r\n                                    arcName: arcColor.arcName\r\n                                }\r\n                            : scan;\r\n                    });\r\n                    setScans(updatedScans);\r\n                } else {\r\n                    setScans(fetchedScans);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Erreur lors du chargement des couleurs d'arcs:\", error);\r\n                setScans(fetchedScans);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchTomeData();\r\n    }, [tomelist, tomenumber]);\r\n\r\n    if (loading) return <div>Chargement...</div>;\r\n    if (!tomeData) return <div>Aucun tome trouvé.</div>;\r\n\r\n    return (\r\n        <div className=\"Tome-Page\">\r\n            <SelectedComponent \r\n                componentName={`Tome ${tomenumber}`}\r\n                componentImgLink={`https://kpiece2.s3.eu-west-3.amazonaws.com/img/tomes/${tomelist}/${tomenumber}.webp`}\r\n                scanCounter={tomeData.lastscan - tomeData.firstscan}\r\n                scans={scans}\r\n                componentLink={`/tomes/${tomelist}/${tomenumber}/01`}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tome;\r\n"],"names":["_ref","componentName","componentLink","componentImgLink","scanCounter","scans","navigate","useNavigate","ascending","setAscending","useState","currentPage","setCurrentPage","sortedScans","sort","a","b","parseInt","scan","totalPages","Math","ceil","length","startIndex","currentScans","slice","_jsxs","className","children","_jsx","onClick","handleClick","style","cursor","src","alt","handleSortClick","map","index","name","backgroundImage","color1","color2","WebkitBackgroundClip","WebkitTextFillColor","arcName","date","saga","arc","ReadScan","Array","_","Tome","tomelist","tomenumber","useParams","tomeData","setTomeData","setScans","loading","setLoading","useEffect","fetchScans","async","fetchedScans","sagas","isArray","tome","arcs","url","response","fetch","ok","filteredScans","json","filter","firstscan","lastscan","error","console","colorsResponse","arcColors","updatedScans","arcColor","find","item","toLowerCase","color","t","fetchTomeData","SelectedComponent"],"sourceRoot":""}