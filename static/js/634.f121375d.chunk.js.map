{"version":3,"file":"static/js/634.f121375d.chunk.js","mappings":"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","sources":["pages/ScansPage/ScanPage.jsx","components/Ost/Ost.jsx","components/ScanBar/ScanBar.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './ScanPage.css';\r\nimport ScanBar from '../../components/ScanBar/ScanBar';\r\nimport Loading from '../../components/Loading/Loading';\r\n\r\nconst ScanPage = () => {\r\n    const { scansaga, scanarc, selectedscan, selectedpagescan } = useParams();\r\n    const navigate = useNavigate();\r\n    const [pages, setPages] = useState([]);\r\n    const [arcScans, setArcScans] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [preloading, setPreloading] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [verticalScan, setVerticalScan] = useState(false);\r\n    const [isFullScreen, setIsFullScreen] = useState(false);\r\n    const [currentPageInput, setCurrentPageInput] = useState(selectedpagescan || 1);\r\n\r\n    // Nouveau: stockage des données search.json\r\n    const [searchData, setSearchData] = useState([]);\r\n\r\n    const handleFullScreen = () => {\r\n        if (!document.fullscreenElement) {\r\n            document.documentElement.requestFullscreen()\r\n                .then(() => {\r\n                    setIsFullScreen(true);\r\n                    document.body.classList.add('fullscreen-mode');\r\n                })\r\n                .catch(err => {\r\n                    console.error(`Error attempting to enable fullscreen: ${err.message}`);\r\n                });\r\n        } else if (document.exitFullscreen) {\r\n            document.body.classList.remove('fullscreen-mode');\r\n            document.exitFullscreen();\r\n            setIsFullScreen(false);\r\n        }\r\n    };\r\n\r\n    // Audio for \"To Be Continued\" page\r\n    const [audio] = useState(new Audio('https://kpiece2.s3.eu-west-3.amazonaws.com/ost/tobecontinued.mp3'));\r\n\r\n    useEffect(() => {\r\n        // Chargement de search.json\r\n        const fetchSearchData = async () => {\r\n            try {\r\n                const response = await fetch('https://kpiece2.s3.eu-west-3.amazonaws.com/data/search.json');\r\n                if (!response.ok) {\r\n                    throw new Error('Impossible de récupérer search.json');\r\n                }\r\n                const data = await response.json();\r\n                setSearchData(data);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        };\r\n        fetchSearchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Only play audio when the custom \"To Be Continued\" page is shown\r\n        if (!loading && !preloading && pages.length > 0) {\r\n            const maxPage = pages[pages.length - 1];\r\n            const isLastPage = parseInt(selectedpagescan) === maxPage + 1;\r\n\r\n            if (isLastPage) {\r\n                audio.volume = 0.05; // Set volume to 5%\r\n                audio.currentTime = 0; // Reset audio to beginning\r\n                audio.play().catch(err => console.error('Audio playback failed:', err));\r\n            }\r\n        }\r\n    }, [selectedpagescan, pages, loading, preloading, audio]);\r\n\r\n    const handleVerticalScan = () => {\r\n        setVerticalScan(prev => !prev);\r\n    };\r\n\r\n    // Handler for scan select change - navigate to the chosen scan's first page\r\n    const handleScanSelect = (e) => {\r\n        const newScan = e.target.value;\r\n        navigate(`/scan/${scansaga}/${scanarc}/${newScan}/1`);\r\n    };\r\n\r\n    // Custom Page\r\n    const getCustomPageContent = () => {\r\n        return (\r\n            <div className=\"last-page\">\r\n                <h2> TO BE CONTINUED... </h2>\r\n                <div className=\"bouton-last-page next-scan\">\r\n                    <button onClick={handleNextScan}>\r\n                        <i className=\"fa-solid fa-arrow-right\"></i> Scan suivant\r\n                    </button>\r\n                </div>\r\n                <div className=\"bouton-last-page back-page\">\r\n                    <button onClick={handleReturnToReading}>\r\n                        <i className=\"fa-solid fa-arrow-left\"></i> RETOUR\r\n                    </button>\r\n                </div>\r\n                <div className=\"bouton-last-page back-scan\">\r\n                    <button onClick={handlePrevScan}>\r\n                        <i className=\"fa-solid fa-arrow-left\"></i> Scan précédent\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const isCustomPage = (page, maxPageNum) => {\r\n        return page === maxPageNum + 1;\r\n    };\r\n\r\n    const preloadImages = (pagesArray) => {\r\n        setPreloading(true);\r\n        let loadedCount = 0;\r\n        pagesArray.forEach((page) => {\r\n            const formattedPage = page < 10 ? `0${page}` : page;\r\n            const img = new Image();\r\n            img.src = `https://kpiece2.s3.eu-west-3.amazonaws.com/scan/${scansaga}/${scanarc}/${selectedscan}/${formattedPage}.png`;\r\n            img.onload = () => {\r\n                loadedCount++;\r\n                const newProgress = Math.floor((loadedCount / pagesArray.length) * 100);\r\n                setProgress(newProgress);\r\n                if (loadedCount === pagesArray.length) {\r\n                    setPreloading(false);\r\n                }\r\n            };\r\n            img.onerror = () => {\r\n                loadedCount++;\r\n                const newProgress = Math.floor((loadedCount / pagesArray.length) * 100);\r\n                setProgress(newProgress);\r\n                if (loadedCount === pagesArray.length) {\r\n                    setPreloading(false);\r\n                }\r\n            };\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchScanData = async () => {\r\n            try {\r\n                const response = await fetch(`https://kpiece2.s3.eu-west-3.amazonaws.com/data/saga/${scansaga}/${scanarc}.json`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch scan data');\r\n                }\r\n                const data = await response.json();\r\n                setArcScans(data);\r\n                const scanData = data.find(scan => scan.scan === parseInt(selectedscan));\r\n                if (scanData) {\r\n                    const maxPages = scanData.maxpages;\r\n                    const pagesArray = Array.from({ length: maxPages }, (_, i) => i + 1);\r\n                    setPages(pagesArray);\r\n                    preloadImages(pagesArray);\r\n                } else {\r\n                    throw new Error('Scan not found');\r\n                }\r\n                setLoading(false);\r\n            } catch (error) {\r\n                setError(error.message);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchScanData();\r\n    }, [scansaga, scanarc, selectedscan]);\r\n\r\n    useEffect(() => {\r\n        if (!loading && !preloading) {\r\n            window.scrollTo(0, 170);\r\n        }\r\n    }, [selectedpagescan, loading, preloading]);\r\n\r\n    useEffect(() => {\r\n        setCurrentPageInput(selectedpagescan || 1);\r\n    }, [selectedpagescan]);\r\n\r\n    const LoadingComponent = () => {\r\n        if (preloading) {\r\n            return (\r\n                <div className=\"loading-container\">\r\n                    <div className=\"spinner\">\r\n                        <div className=\"double-bounce1\"></div>\r\n                        <div className=\"double-bounce2\"></div>\r\n                    </div>\r\n                    <p>Chargement des pages: {progress}%</p>\r\n                    <div className=\"scan-loading-progress-bar\">\r\n                        <div className=\"scan-loading-progress\" style={{ width: `${progress}%` }}></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return <Loading />;\r\n    };\r\n\r\n    if (loading || preloading) return <LoadingComponent />;\r\n    if (error) return <div className=\"scan-page-error\">Scan Non disponible</div>;\r\n\r\n    const currentPage = selectedpagescan && pages.includes(parseInt(selectedpagescan))\r\n        ? parseInt(selectedpagescan)\r\n        : 1;\r\n    const maxPage = pages[pages.length - 1];\r\n    const showCustomPage = isCustomPage(parseInt(selectedpagescan), maxPage);\r\n    const isFinalView = !pages.includes(currentPage) && !showCustomPage;\r\n\r\n    const navigateToPage = (page) => {\r\n        navigate(`/scan/${scansaga}/${scanarc}/${selectedscan}/${page}`);\r\n    };\r\n\r\n    const handleImageClick = (e) => {\r\n        const rect = e.currentTarget.getBoundingClientRect();\r\n        const clickX = e.clientX - rect.left;\r\n        const width = rect.width;\r\n        if (clickX < width / 2) {\r\n            if (currentPage === 1) return;\r\n            navigateToPage(currentPage - 1);\r\n        } else {\r\n            if (currentPage === maxPage) {\r\n                navigateToPage(maxPage + 1);\r\n            } else {\r\n                navigateToPage(currentPage + 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Modification: utiliser searchData pour saga/arc quand on change de scan\r\n    const handlePrevScan = () => {\r\n        const prevScan = parseInt(selectedscan) - 1;\r\n        const foundPrev = searchData.find(item => prevScan >= item.firstscan && prevScan <= item.lastscan);\r\n        if (foundPrev) {\r\n            navigate(`/scan/${foundPrev.saga}/${foundPrev.arc}/${prevScan}/1`);\r\n        } else {\r\n            console.log('Scan précédent introuvable dans searchData');\r\n        }\r\n    };\r\n\r\n    const handleNextScan = () => {\r\n        const nextScan = parseInt(selectedscan) + 1;\r\n        const foundNext = searchData.find(item => nextScan >= item.firstscan && nextScan <= item.lastscan);\r\n        if (foundNext) {\r\n            navigate(`/scan/${foundNext.saga}/${foundNext.arc}/${nextScan}/1`);\r\n        } else {\r\n            console.log('Scan suivant introuvable dans searchData');\r\n        }\r\n    };\r\n\r\n    const handleReturnToReading = () => {\r\n        navigateToPage(maxPage);\r\n    };\r\n\r\n    const handlePageInputChange = (e) => {\r\n        const value = e.target.value;\r\n        if (/^\\d*$/.test(value)) {\r\n            setCurrentPageInput(value);\r\n        }\r\n    };\r\n\r\n    const handlePageInputBlur = () => {\r\n        const page = parseInt(currentPageInput, 10);\r\n        if (page >= 1 && page <= maxPage) {\r\n            navigateToPage(page);\r\n        } else {\r\n            setCurrentPageInput(currentPage);\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            handlePageInputBlur();\r\n        }\r\n    };\r\n\r\n    let content = null;\r\n\r\n    if (verticalScan) {\r\n        content = pages.map(page => {\r\n            const formattedPage = page < 10 ? `0${page}` : page;\r\n            return (\r\n                <img\r\n                    key={page}\r\n                    src={`https://kpiece2.s3.eu-west-3.amazonaws.com/scan/${scansaga}/${scanarc}/${selectedscan}/${formattedPage}.png`}\r\n                    alt={`Page ${formattedPage}`}\r\n                    className=\"scan-page-image\"\r\n                />\r\n            );\r\n        });\r\n    } else {\r\n        if (showCustomPage) {\r\n            content = getCustomPageContent();\r\n        } else if (isFinalView) {\r\n            content = (\r\n                <div className=\"final-view\">\r\n                    <button onClick={handlePrevScan}>\r\n                        <i className=\"fa-solid fa-arrow-left\"></i> Scan précédent\r\n                    </button>\r\n                    <button onClick={handleNextScan}>\r\n                        <i className=\"fa-solid fa-arrow-right\"></i> Scan suivant\r\n                    </button>\r\n                    <button onClick={handleReturnToReading}>\r\n                        <i className=\"fa-solid fa-arrow-left\"></i> Revenir à la lecture\r\n                    </button>\r\n                </div>\r\n            );\r\n        } else {\r\n            const formattedPage = currentPage < 10 ? `0${currentPage}` : currentPage;\r\n            content = (\r\n                <div className=\"image-container\" onClick={handleImageClick}>\r\n                    <div className=\"left-half\" />\r\n                    <div className=\"right-half\" />\r\n                    <img\r\n                        src={`https://kpiece2.s3.eu-west-3.amazonaws.com/scan/${scansaga}/${scanarc}/${selectedscan}/${formattedPage}.png`}\r\n                        alt={`Page ${formattedPage}`}\r\n                        className=\"scan-page-image\"\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"scan-page\">\r\n            <div className='top-scan-element'>\r\n                <div className=\"page-counter\">\r\n                    Page <input\r\n                        type=\"text\"\r\n                        value={currentPageInput}\r\n                        onChange={handlePageInputChange}\r\n                        onBlur={handlePageInputBlur}\r\n                        onKeyPress={handleKeyPress}\r\n                        style={{ width: '50px', textAlign: 'center' }}\r\n                    /> / {maxPage}\r\n                </div>\r\n                <div className=\"select-scan\">\r\n                    <select value={selectedscan} onChange={handleScanSelect}>\r\n                        {arcScans.map((scan) => (\r\n                            <option key={scan.scan} value={scan.scan}>\r\n                                {scan.scan} - {scan.name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            {!showCustomPage && (\r\n                <ScanBar\r\n                    onFullScreen={handleFullScreen}\r\n                    onVerticalScan={handleVerticalScan}\r\n                    isFullScreen={isFullScreen}\r\n                />\r\n            )}\r\n            {content}\r\n            {maxPage && !showCustomPage && !verticalScan && (\r\n                <div className=\"page-progress-bar\">\r\n                    <div\r\n                        className=\"page-progress\"\r\n                        style={{ width: `${(currentPage / maxPage) * 100}%` }}\r\n                    ></div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScanPage;","import React, { useState, useRef, useEffect } from 'react';\r\nimport './Ost.css';\r\n\r\nconst Ost = () => {\r\n    // On supprime \"happy\" et on ne garde que les moods désirés\r\n    const [tracks, setTracks] = useState({\r\n        chill: [],\r\n        danger: [],\r\n        emotion: [],\r\n        epic: [],\r\n        fight: [],\r\n        fun: [],\r\n        mysterious: [],\r\n        sad: []\r\n    });\r\n\r\n    const [isOn, setIsOn] = useState(() => {\r\n        const savedIsOn = localStorage.getItem('ostIsOn');\r\n        return savedIsOn !== null ? JSON.parse(savedIsOn) : false;\r\n    });\r\n\r\n    const [volume, setVolume] = useState(() => {\r\n        const savedVolume = localStorage.getItem('ostVolume');\r\n        return savedVolume !== null ? JSON.parse(savedVolume) : 50;\r\n    });\r\n    const [currentMood, setCurrentMood] = useState('');\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [ostInfo, setOstInfo] = useState([]);\r\n    const audioRef = useRef(null);\r\n    const baseUrl = \"https://kpiece2.s3.eu-west-3.amazonaws.com/ost/\";\r\n\r\n    // Récupération du JSON ost.json\r\n    const fetchOstInfo = async () => {\r\n        try {\r\n            const response = await fetch(\"https://kpiece2.s3.eu-west-3.amazonaws.com/ost/ost.json\");\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to fetch OST info\");\r\n            }\r\n            const data = await response.json();\r\n            setOstInfo(data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(\"Error fetching OST info:\", error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    // Fonction pour jouer une piste aléatoire du mood actuel\r\n    const handleRandomTrack = () => {\r\n        if (currentMood && tracks[currentMood] && tracks[currentMood].length > 0) {\r\n            // Génère un index aléatoire différent de l'index actuel\r\n            let randomIndex;\r\n            do {\r\n                randomIndex = Math.floor(Math.random() * tracks[currentMood].length);\r\n            } while (randomIndex === currentIndex && tracks[currentMood].length > 1);\r\n\r\n            // Joue la piste aléatoire\r\n            playTrack(currentMood, randomIndex);\r\n        }\r\n    };\r\n\r\n    // Charge chaque piste sous forme d'objet { fileName, displayName }\r\n    const loadTracksForMood = async (mood, info = null) => {\r\n        setIsLoading(true);\r\n\r\n        // On utilise les infos déjà chargées sinon on les fetch\r\n        const data = info || ostInfo || await fetchOstInfo();\r\n\r\n        // Trouve l'objet décrivant le mood dans ost.json\r\n        const moodInfo = data.find(item => item.name === mood);\r\n        if (!moodInfo) {\r\n            console.error(`Aucune info trouvée pour le mood: ${mood}`);\r\n            setIsLoading(false);\r\n            return [];\r\n        }\r\n\r\n        // moodInfo.ostnumber = nombre de pistes\r\n        // moodInfo.ostname = tableau de titres (ex. [\"Mother Sea\", \"Gold and Oden\", …])\r\n        const moodTracks = moodInfo.ostname.map((title, idx) => ({\r\n            fileName: `${idx + 1}.mp3`,  // ex: \"1.mp3\", \"2.mp3\"…\r\n            displayName: title          // ex: \"Mother Sea\", …\r\n        }));\r\n\r\n        setTracks(prev => ({\r\n            ...prev,\r\n            [mood]: moodTracks\r\n        }));\r\n        setIsLoading(false);\r\n        return moodTracks;\r\n    };\r\n\r\n    // Joue la piste (index) du mood\r\n    const playTrack = async (mood, index) => {\r\n        // Allume l'OST si elle est éteinte\r\n        if (!isOn) {\r\n            setIsOn(true);\r\n        }\r\n        setIsLoading(true);\r\n\r\n        // Récupération des pistes pour le mood\r\n        let moodTracks = tracks[mood];\r\n        if (!moodTracks || moodTracks.length === 0) {\r\n            moodTracks = await loadTracksForMood(mood);\r\n        }\r\n\r\n        if (moodTracks && moodTracks.length > 0) {\r\n            // Gestion du débordement (index trop petit ou trop grand)\r\n            if (index >= moodTracks.length) {\r\n                index = 0;\r\n            } else if (index < 0) {\r\n                index = moodTracks.length - 1;\r\n            }\r\n\r\n            const trackObj = moodTracks[index];\r\n            const trackUrl = `${baseUrl}${mood}/${trackObj.fileName}`;\r\n\r\n            if (audioRef.current) {\r\n                audioRef.current.pause();\r\n                audioRef.current.src = trackUrl;\r\n                audioRef.current.volume = volume / 100;\r\n                audioRef.current.oncanplaythrough = () => {\r\n                    audioRef.current.play()\r\n                        .then(() => {\r\n                            setCurrentMood(mood);\r\n                            setCurrentIndex(index);\r\n                            setIsPlaying(true);\r\n                            setIsLoading(false);\r\n                        })\r\n                        .catch(error => {\r\n                            console.error(\"Erreur lors de la lecture:\", error);\r\n                            setIsPlaying(false);\r\n                            setIsLoading(false);\r\n                        });\r\n                };\r\n                audioRef.current.onerror = () => {\r\n                    console.error(`Erreur de chargement pour: ${trackUrl}`);\r\n                    setIsPlaying(false);\r\n                    setIsLoading(false);\r\n                };\r\n            }\r\n        } else {\r\n            console.error(`Aucune piste trouvée pour l'ambiance: ${mood}`);\r\n            setIsPlaying(false);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Sélectionne un mood différent\r\n    const handleMoodClick = (mood) => {\r\n        if (currentMood !== mood) {\r\n            playTrack(mood, 0);\r\n        }\r\n    };\r\n\r\n    const handleNext = () => {\r\n        if (currentMood) {\r\n            playTrack(currentMood, currentIndex + 1);\r\n        }\r\n    };\r\n\r\n    const handlePrev = () => {\r\n        if (currentMood) {\r\n            playTrack(currentMood, currentIndex - 1);\r\n        }\r\n    };\r\n\r\n    const handleVolumeChange = (e) => {\r\n        const newVolume = e.target.value;\r\n        setVolume(newVolume);\r\n        localStorage.setItem('ostVolume', JSON.stringify(newVolume));\r\n        if (audioRef.current) {\r\n            audioRef.current.volume = newVolume / 100;\r\n        }\r\n    };\r\n\r\n    const handlePlayPause = () => {\r\n        if (audioRef.current) {\r\n            if (isPlaying) {\r\n                audioRef.current.pause();\r\n                setIsPlaying(false);\r\n            } else if (audioRef.current.src) {\r\n                audioRef.current.play()\r\n                    .then(() => {\r\n                        setIsPlaying(true);\r\n                    })\r\n                    .catch(error => {\r\n                        console.error(\"Erreur lors de la reprise de lecture:\", error);\r\n                    });\r\n            } else if (currentMood) {\r\n                playTrack(currentMood, currentIndex);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Éteint l'OST quand isOn passe à false\r\n    useEffect(() => {\r\n        if (!isOn && audioRef.current) {\r\n            audioRef.current.pause();\r\n            setIsPlaying(false);\r\n        }\r\n    }, [isOn]);\r\n\r\n    // Au montage ou quand isOn change :\r\n    // charge l'ost.json et initialise les pistes\r\n    useEffect(() => {\r\n        if (isOn) {\r\n            const initializeOst = async () => {\r\n                setIsLoading(true);\r\n                const info = await fetchOstInfo();\r\n                // On précharge les pistes pour tous les moods\r\n                for (const moodItem of info) {\r\n                    await loadTracksForMood(moodItem.name, info);\r\n                }\r\n                setIsLoading(false);\r\n            };\r\n            initializeOst();\r\n        } else if (audioRef.current) {\r\n            audioRef.current.pause();\r\n            setIsPlaying(false);\r\n        }\r\n    }, [isOn]);\r\n\r\n    // Auto-play de la piste suivante quand la piste se termine\r\n    useEffect(() => {\r\n        if (audioRef.current) {\r\n            const handleTrackEnded = () => {\r\n                if (currentMood) {\r\n                    playTrack(currentMood, currentIndex + 1);\r\n                }\r\n            };\r\n            audioRef.current.addEventListener('ended', handleTrackEnded);\r\n            return () => {\r\n                if (audioRef.current) {\r\n                    audioRef.current.removeEventListener('ended', handleTrackEnded);\r\n                }\r\n            };\r\n        }\r\n    }, [currentMood, currentIndex]);\r\n\r\n    // Enregistre l'état On/Off dans localStorage\r\n    useEffect(() => {\r\n        localStorage.setItem('ostIsOn', JSON.stringify(isOn));\r\n    }, [isOn]);\r\n\r\n    return (\r\n        <div className=\"ost-player\">\r\n            <div className=\"ost-title\">OST</div>\r\n\r\n            <div className=\"switch-container\">\r\n                <label className=\"switch\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={isOn}\r\n                        onChange={() => setIsOn(!isOn)}\r\n                    />\r\n                    <span className=\"slider round\"></span>\r\n                </label>\r\n            </div>\r\n\r\n            {isOn && (\r\n                <>\r\n\r\n\r\n\r\n\r\n                    <div className=\"track-navigation\">\r\n                        <button\r\n                            className=\"prev-button\"\r\n                            onClick={handlePrev}\r\n                            disabled={!currentMood || isLoading}\r\n                        >\r\n                            <i className=\"fa-solid fa-backward-step\"></i>\r\n                        </button>\r\n\r\n\r\n                        <button\r\n                            className=\"play-pause-button\"\r\n                            onClick={handlePlayPause}\r\n                            disabled={isLoading || (!currentMood && !audioRef.current?.src)}\r\n                        >\r\n                            {isLoading ? (\r\n                                <i className=\"fa-solid fa-spinner fa-spin\"></i>\r\n                            ) : isPlaying ? (\r\n                                <i className=\"fa-solid fa-pause\"></i>\r\n                            ) : (\r\n                                <i className=\"fa-solid fa-play\"></i>\r\n                            )}\r\n                        </button>\r\n\r\n\r\n\r\n                        <button\r\n                            className=\"next-button\"\r\n                            onClick={handleNext}\r\n                            disabled={!currentMood || isLoading}\r\n                        >\r\n                            <i className=\"fa-solid fa-forward-step\"></i>\r\n                        </button>\r\n\r\n                        <button className='random-button'\r\n                            onClick={handleRandomTrack} \r\n                            disabled={!currentMood || isLoading}\r\n                    >\r\n                        <i className=\"fa-solid fa-shuffle\"></i>\r\n                        \r\n                    </button>\r\n                    </div>\r\n\r\n\r\n\r\n                    <div className=\"volume-container\">\r\n                        <input\r\n                            type=\"range\"\r\n                            min=\"0\"\r\n                            max=\"100\"\r\n                            value={volume}\r\n                            onChange={handleVolumeChange}\r\n                            className=\"volume-slider\"\r\n                        />\r\n                        {volume}%\r\n                    </div>\r\n\r\n                    <div className=\"mood-buttons\">\r\n                        {Object.keys(tracks).map(mood => (\r\n                            <button\r\n                                key={mood}\r\n                                className={\r\n                                    `mood-button ${currentMood === mood ? 'active' : ''\r\n                                    } ${isLoading && currentMood !== mood\r\n                                        ? 'disabled'\r\n                                        : ''\r\n                                    }`\r\n                                }\r\n                                onClick={() => handleMoodClick(mood)}\r\n                                disabled={isLoading && currentMood !== mood}\r\n                            >\r\n                                {mood.charAt(0).toUpperCase() + mood.slice(1)}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <div className=\"current-audio\">\r\n                        <p> <i className=\"fa-solid fa-music\"></i>\r\n                            {currentMood && tracks[currentMood] && tracks[currentMood][currentIndex]\r\n                                ? `  ${tracks[currentMood][currentIndex].displayName}.mp3`\r\n                                : 'Aucune Ost chargé'}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <audio ref={audioRef} />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Ost;","import React from 'react';\r\nimport './ScanBar.css';\r\nimport Ost from '../Ost/Ost';\r\n\r\nfunction ScanBar({ onFullScreen, onVerticalScan }) {\r\n    const [verticalIcon, setVerticalIcon] = React.useState(true);\r\n\r\n    const handleVerticalScanClick = () => {\r\n        setVerticalIcon(!verticalIcon);\r\n        // Call the prop onVerticalScan, configured externally.\r\n        if (onVerticalScan) {\r\n            onVerticalScan();\r\n        }\r\n    };\r\n\r\n    // Create style object for scan-bar based on vertical mode\r\n    const scanBarStyle = !verticalIcon ? {\r\n        position: 'sticky',\r\n        top: 0,\r\n        background: 'black',\r\n        borderRadius: 0\r\n    } : {};\r\n\r\n    return (\r\n        <div className='scan-bar' style={scanBarStyle}>\r\n            <button onClick={onFullScreen} className='scan-bar-button'>\r\n                <i className=\"fa-solid fa-expand\"></i>\r\n            </button>\r\n            <button onClick={handleVerticalScanClick} className='scan-bar-button'>\r\n                <i className={`fa-solid ${verticalIcon ? 'fa-arrows-up-down' : 'fa-arrows-left-right'}`}></i>\r\n            </button>\r\n                <Ost />\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScanBar;\r\n"],"names":["ScanPage","scansaga","scanarc","selectedscan","selectedpagescan","useParams","navigate","useNavigate","pages","setPages","useState","arcScans","setArcScans","loading","setLoading","preloading","setPreloading","progress","setProgress","error","setError","verticalScan","setVerticalScan","isFullScreen","setIsFullScreen","currentPageInput","setCurrentPageInput","searchData","setSearchData","audio","Audio","useEffect","async","response","fetch","ok","Error","data","json","err","console","fetchSearchData","length","maxPage","parseInt","volume","currentTime","play","catch","scanData","find","scan","maxPages","maxpages","pagesArray","Array","from","_","i","loadedCount","forEach","page","formattedPage","img","Image","src","onload","newProgress","Math","floor","onerror","preloadImages","message","fetchScanData","window","scrollTo","LoadingComponent","_jsxs","className","children","_jsx","style","width","Loading","currentPage","includes","showCustomPage","isFinalView","navigateToPage","handleImageClick","e","rect","currentTarget","getBoundingClientRect","clientX","left","handlePrevScan","prevScan","foundPrev","item","firstscan","lastscan","saga","arc","log","handleNextScan","nextScan","foundNext","handleReturnToReading","handlePageInputBlur","content","map","alt","onClick","type","value","onChange","target","test","onBlur","onKeyPress","key","textAlign","newScan","name","ScanBar","onFullScreen","handleFullScreen","document","fullscreenElement","exitFullscreen","body","classList","remove","documentElement","requestFullscreen","then","add","onVerticalScan","handleVerticalScan","prev","Ost","_audioRef$current","tracks","setTracks","chill","danger","emotion","epic","fight","fun","mysterious","sad","isOn","setIsOn","savedIsOn","localStorage","getItem","JSON","parse","setVolume","savedVolume","currentMood","setCurrentMood","currentIndex","setCurrentIndex","isLoading","setIsLoading","isPlaying","setIsPlaying","ostInfo","setOstInfo","audioRef","useRef","fetchOstInfo","loadTracksForMood","mood","info","arguments","undefined","moodInfo","moodTracks","ostname","title","idx","fileName","displayName","playTrack","index","trackObj","trackUrl","current","pause","oncanplaythrough","moodItem","initializeOst","handleTrackEnded","addEventListener","removeEventListener","setItem","stringify","checked","_Fragment","handlePrev","disabled","handlePlayPause","handleNext","handleRandomTrack","randomIndex","random","min","max","newVolume","Object","keys","handleMoodClick","charAt","toUpperCase","slice","ref","_ref","verticalIcon","setVerticalIcon","React","scanBarStyle","position","top","background","borderRadius","handleVerticalScanClick"],"sourceRoot":""}