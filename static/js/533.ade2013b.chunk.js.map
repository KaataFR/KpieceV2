{"version":3,"file":"static/js/533.ade2013b.chunk.js","mappings":"0JAKA,MA+CA,EA/CgBA,IAAqB,IAApB,KAAEC,EAAI,KAAEC,GAAMF,EAC3B,MAAOG,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,GAM7C,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EAErBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAE5BC,EAAAA,EAAAA,KAAA,UAAQC,QATCC,KACjBP,GAAeD,EAAW,EAQYK,SACzBL,GAAaM,EAAAA,EAAAA,KAAA,KAAGF,UAAU,uBAA2BE,EAAAA,EAAAA,KAAA,KAAGF,UAAU,wBAGvED,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,QAAMP,QAKbE,IACGM,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,SACpBN,EAAKU,KAAI,CAACC,EAAKC,KACZL,EAAAA,EAAAA,KAAA,OAAiBF,UAAU,WAAUC,UACjCF,EAAAA,EAAAA,MAACS,EAAAA,GAAI,CAACC,GAAI,SAASH,EAAII,YAAYJ,EAAIK,aAAaV,SAAA,EAChDC,EAAAA,EAAAA,KAAA,OAAKU,IAAKN,EAAIO,OAAQC,IAAKR,EAAIA,OAC/BJ,EAAAA,EAAAA,KAAA,KAAAD,SAAIK,EAAIA,UAHNC,SASpB,ECkBd,EApDaQ,KACT,MAAOC,EAAOC,IAAYnB,EAAAA,EAAAA,UAAS,KAEnCoB,EAAAA,EAAAA,YAAU,KACaC,WACf,IACI,MAAMC,QAAiBC,MAAM,6DAC7B,IAAKD,EAASE,GACV,MAAM,IAAIC,MAAM,uBAAuBH,EAASI,UAEpD,MAAMC,QAAaL,EAASM,OAC5BT,EAASQ,EACb,CAAE,MAAOE,GACLC,QAAQD,MAAM,4BAA6BA,EAC/C,GAGJE,EAAY,GACb,IAEH,MAAOC,EAAWC,IAAgBjC,EAAAA,EAAAA,WAAS,GAE3C,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACpBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,SAAQC,SAAC,sBACxBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UACxBC,EAAAA,EAAAA,KAAA,UAAQC,QAASA,IAAM4B,GAAcD,GAAW7B,UAC5CC,EAAAA,EAAAA,KAAA,KAAGF,UAAW,0BAA0B8B,EAAwB,GAAZ,iBAG3D,IAAId,GACAgB,MAAK,CAACC,EAAGC,IAAMJ,EAAYG,EAAEE,OAASD,EAAEC,OAASD,EAAEC,OAASF,EAAEE,SAC9D9B,KAAI,CAACX,EAAMa,KACRL,EAAAA,EAAAA,KAACkC,EAAO,CAEJ1C,KAAMA,EAAK2C,KACX1C,KACI2C,MAAMC,QAAQ7C,EAAK8C,WAAaF,MAAMC,QAAQ7C,EAAKiB,YAC7CjB,EAAK8C,SAASnC,KAAI,CAACoC,EAASC,KAAG,CAC7BpC,IAAKmC,EACL/B,SAAUhB,EAAKgB,SACfC,WAAYjB,EAAKiB,WAAW+B,GAC5B7B,OAAQ,uDAAuDnB,EAAKiB,WAAW+B,cAEjF,IAVLhD,EAAKiD,IAAMpC,OAc1B,C","sources":["components/ArcCard/ArcCard.jsx","pages/Saga/Saga.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport './ArcCard.css';\r\n\r\nconst ArcCard = ({ saga, arcs }) => {\r\n    const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n    const toggleExpand = () => {\r\n        setIsExpanded(!isExpanded);\r\n    };\r\n\r\n    return (\r\n        <div className=\"arc-card\">\r\n\r\n            <div className=\"arc-card-header\">\r\n\r\n                <button onClick={toggleExpand}>\r\n                    {isExpanded ? <i className=\"fa-solid fa-minus\"></i> : <i className=\"fa-solid fa-plus\"></i>}\r\n                </button>\r\n\r\n                <h3>Saga {saga}</h3>\r\n\r\n            </div>\r\n\r\n\r\n            {isExpanded && (\r\n                <div className=\"arc-list\">\r\n                    {arcs.map((arc, index) => (\r\n                        <div key={index} className=\"arc-item\">\r\n                            <Link to={`/saga/${arc.saganame}/${arc.arcssearch}`}>\r\n                                <img src={arc.arcimg} alt={arc.arc} />\r\n                                <p>{arc.arc}</p>\r\n                            </Link>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nArcCard.propTypes = {\r\n    saga: PropTypes.string.isRequired,\r\n    arcs: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            arc: PropTypes.string.isRequired,\r\n            arcimg: PropTypes.string.isRequired\r\n        })\r\n    ).isRequired\r\n};\r\n\r\nexport default ArcCard;","import React, { useEffect, useState } from 'react';\r\nimport ArcCard from '../../components/ArcCard/ArcCard';\r\nimport './Saga.css';\r\n\r\nconst Saga = () => {\r\n    const [sagas, setSagas] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchSagas = async () => {\r\n            try {\r\n                const response = await fetch('https://kpiece2.s3.eu-west-3.amazonaws.com/data/saga.json');\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                setSagas(data);\r\n            } catch (error) {\r\n                console.error('Error fetching saga data:', error);\r\n            }\r\n        };\r\n\r\n        fetchSagas();\r\n    }, []);\r\n\r\n    const [ascending, setAscending] = useState(true);\r\n    \r\n    return (\r\n        <div className=\"arc-page\">\r\n             <h2 className='arc-h2'> Liste des Saga </h2>\r\n            <div className=\"sort-button\">\r\n                <button onClick={() => setAscending(!ascending)}>\r\n                    <i className={`fa-solid fa-angles-up ${!ascending ? 'rotated' : ''}`}></i>\r\n                </button>\r\n            </div>\r\n            {[...sagas]\r\n                .sort((a, b) => ascending ? a.number - b.number : b.number - a.number)\r\n                .map((saga, index) => (\r\n                    <ArcCard\r\n                        key={saga.id || index}\r\n                        saga={saga.name}\r\n                        arcs={\r\n                            Array.isArray(saga.arcsname) && Array.isArray(saga.arcssearch)\r\n                                ? saga.arcsname.map((arcName, idx) => ({\r\n                                    arc: arcName,\r\n                                    saganame: saga.saganame,\r\n                                    arcssearch: saga.arcssearch[idx],\r\n                                    arcimg: `https://kpiece2.s3.eu-west-3.amazonaws.com/img/arcs/${saga.arcssearch[idx]}.webp`\r\n                                }))\r\n                                : []\r\n                        }\r\n                    />\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Saga;\r\n"],"names":["_ref","saga","arcs","isExpanded","setIsExpanded","useState","_jsxs","className","children","_jsx","onClick","toggleExpand","map","arc","index","Link","to","saganame","arcssearch","src","arcimg","alt","Saga","sagas","setSagas","useEffect","async","response","fetch","ok","Error","status","data","json","error","console","fetchSagas","ascending","setAscending","sort","a","b","number","ArcCard","name","Array","isArray","arcsname","arcName","idx","id"],"sourceRoot":""}